var documenterSearchIndex = {"docs":
[{"location":"home.html","page":"Home","title":"Home","text":"CurrentModule = Mitosis","category":"page"},{"location":"home.html","page":"Home","title":"Home","text":"DocTestSetup = quote\n    using Mitosis\n    using Random, Test, LinearAlgebra, Statistics\nend","category":"page"},{"location":"home.html#Mitosis","page":"Home","title":"Mitosis","text":"","category":"section"},{"location":"home.html","page":"Home","title":"Home","text":"Incorporate discrete and continuous time Markov processes as building blocks into probabilistic graphical models.","category":"page"},{"location":"home.html#Based-on-MeasureTheory.jl","page":"Home","title":"Based on MeasureTheory.jl","text":"","category":"section"},{"location":"home.html","page":"Home","title":"Home","text":"Mitosis defines its probability distributions, densities in terms of MeasureTheory.jl.","category":"page"},{"location":"home.html","page":"Home","title":"Home","text":"m = [1.0, 0.5]\nK = Matrix(1.0I, 2, 2)\np = Gaussian(μ=m, Σ=K)\n\nmean(p) == m\n\n# output\ntrue","category":"page"},{"location":"home.html#Key-concepts","page":"Home","title":"Key concepts","text":"","category":"section"},{"location":"home.html#Kernel","page":"Home","title":"Kernel","text":"","category":"section"},{"location":"home.html","page":"Home","title":"Home","text":"The core concept of Mitosis is the Markov kernel.","category":"page"},{"location":"home.html","page":"Home","title":"Home","text":"A kernel κ = kernel(Gaussian, μ=f, Σ=g) returns a callable which returns a measure with parameters determined by functions f, g...","category":"page"},{"location":"home.html","page":"Home","title":"Home","text":"f(x) = x*m\ng(_) = K\nk = kernel(Gaussian; μ=f, Σ=g)\nmean(k(3.0)) == 3*m && cov(k(3.0)) == K\n\n# output\ntrue","category":"page"},{"location":"home.html#Linear-and-affine-Gaussian-kernel","page":"Home","title":"Linear and affine Gaussian kernel","text":"","category":"section"},{"location":"home.html","page":"Home","title":"Home","text":"Gaussian kernel become especially powerful if combined with linear and affine mean functions, AffineMap, LinearMap, ConstantMap:","category":"page"},{"location":"home.html","page":"Home","title":"Home","text":"B = [0.8 0.5; -0.1 0.8]\nβ = [0.1, 0.2]\nQ = [0.2 0.0; 0.0 1.0]\n\nx = [0.112, -1.22]\nb = AffineMap(B, β)\n\nb(x) == B*x + β\n\n# output\n\ntrue","category":"page"},{"location":"home.html","page":"Home","title":"Home","text":"Kernels with affine mean and constant covariance propagate Gaussian uncertainty:","category":"page"},{"location":"home.html","page":"Home","title":"Home","text":"\nk = kernel(Gaussian, μ = AffineMap(B, β), Σ=ConstantMap(Q))\n\nm = [1.0, 0.5]\nK = Matrix(1.0I, 2, 2)\np = Gaussian(μ=m, Σ=K)\n\nk(p) isa Gaussian\n\n# output\n\ntrue","category":"page"},{"location":"home.html#References","page":"Home","title":"References","text":"","category":"section"},{"location":"home.html","page":"Home","title":"Home","text":"Frank van der Meulen, Moritz Schauer (2020): Automatic Backward Filtering Forward Guiding for Markov processes and graphical models. [arXiv:2010.03509].","category":"page"},{"location":"library.html#Library","page":"Library","title":"Library","text":"","category":"section"},{"location":"library.html","page":"Library","title":"Library","text":"Modules = [Mitosis]","category":"page"},{"location":"library.html#Mitosis.AffineMap","page":"Library","title":"Mitosis.AffineMap","text":"AffineMap(B, β)\n\nRepresents a function f = AffineMap(B, β) such that f(x) == B*x + β.\n\n\n\n\n\n","category":"type"},{"location":"library.html#Mitosis.BF","page":"Library","title":"Mitosis.BF","text":"BF()\n\nBackward filter for linear Gaussian systems parametrized by mean and covariance of the backward filtered marginal distribution.\n\n\n\n\n\n","category":"type"},{"location":"library.html#Mitosis.BFFG","page":"Library","title":"Mitosis.BFFG","text":"BFFG()\n\nBackward filter forward guiding context for non-linear Gaussian systems with h parametrized by WGaussian{(:F,:Γ,:c)}` (see Theorem 7.1 [Automatic BFFG].)\n\n\n\n\n\n","category":"type"},{"location":"library.html#Mitosis.ConstantMap","page":"Library","title":"Mitosis.ConstantMap","text":"ConstantMap(β)\n\nRepresents a function f = ConstantMap(β) such that f(x) == β.\n\n\n\n\n\n","category":"type"},{"location":"library.html#Mitosis.Gaussian","page":"Library","title":"Mitosis.Gaussian","text":"Gaussian{(:μ,:Σ)}\nGaussian{(:F,:Γ)}\n\nMitosis provides the measure Gaussian based on MeasureTheory.jl, with a mean μ and covariance Σ parametrization, or parametrised by natural parameters F = Γ μ, Γ = Σ⁻¹.\n\nUsage:\n\nGaussian(μ=m, Σ=C)\np = Gaussian{(:μ,:Σ)}(m, C)\nGaussian(F=C\\m, Γ=inv(C))\n\nconvert(Gaussian{(:F,:Γ)}, p)\n\nrand(rng, p)\n\n\n\n\n\n","category":"type"},{"location":"library.html#Mitosis.LinearMap","page":"Library","title":"Mitosis.LinearMap","text":"LinearMap(B)\n\nRepresents a function f = LinearMap(B) such that f(x) == B*x.\n\n\n\n\n\n","category":"type"},{"location":"library.html#MeasureTheory.kernel","page":"Library","title":"MeasureTheory.kernel","text":"kernel(f, M)\nkernel((f1, f2, ...), M)\n\nA kernel κ = kernel(f, M) returns a wrapper around a function f giving the parameters for a measure of type M, such that κ(x) = M(f(x)...) respective κ(x) = M(f1(x), f2(x), ...).\n\nIf the argument is a named tuple (;a=f1, b=f1), κ(x) is defined as M(;a=f(x),b=g(x)).\n\nReference\n\nhttps://en.wikipedia.org/wiki/Markov_kernel\n\n\n\n\n\n","category":"function"},{"location":"library.html#Mitosis.conditional-Tuple{Gaussian{(:μ, :Σ),T} where T,Any,Any,Any}","page":"Library","title":"Mitosis.conditional","text":"conditional(p::Gaussian, A, B, xB)\n\nConditional distribution of X[i for i in A] given X[i for i in B] == xB if X  P.\n\n\n\n\n\n","category":"method"},{"location":"library.html#Mitosis.correct-Union{Tuple{T}, Tuple{Gaussian{T,T1} where T1,Kernel{T,NamedTuple{(:μ, :Σ),Tuple{A,C}}} where C<:ConstantMap where A<:LinearMap where T<:Gaussian,Any}} where T","page":"Library","title":"Mitosis.correct","text":"correct(prior, obskernel, obs) = u, yres, S\n\nJoseph form correction step of a Kalman filter with prior state and obs the observation with observation kernel obskernel = kernel(Gaussian; μ=LinearMap(H), Σ=ConstantMap(R)) H is the observation operator and R the observation covariance. Returns corrected/conditional distribution u, the residual and the innovation covariance. See https://en.wikipedia.org/wiki/Kalman_filter#Update.\n\n\n\n\n\n","category":"method"},{"location":"index.html","page":"Index","title":"Index","text":"CurrentModule = Mitosis","category":"page"},{"location":"index.html#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"","category":"page"}]
}
